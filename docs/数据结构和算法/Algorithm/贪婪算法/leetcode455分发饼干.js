/*
 假设你是一位很棒的家长，想要给你的孩子们一些小饼干。
但是，每个孩子最多只能给一块饼干。对每个孩子 i ，都有一个胃口值 gi ，
这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j ，都有一个尺寸 sj 。如果 sj >= gi ，
我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。
你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。
注意：

你可以假设胃口值为正。
一个小朋友最多只能拥有一块饼干。

示例 1:

输入: [1,2,3], [1,1]

输出: 1

解释: 
你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
所以你应该输出1。
示例 2:

输入: [1,2], [1,2,3]

输出: 2

解释: 
你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。
你拥有的饼干数量和尺寸都足以让所有孩子满足。
所以你应该输出2. */

/* 思路：
在循环中，先将最大的饼干给最难满足的小孩。
如果不能满足，就给下一个小孩，知道给到能满足的。 */
var findContentChildren = function(g, s) {
    // 从大到小贪心，每次那我最大的去匹配你最大的，不行再往后推
    g.sort((a,b)=>b-a)
    s.sort((a,b)=>b-a)
    let gLen = g.length
    let sLen = s.length
    // 我们需要两个指针来控制当前要分配的饼干大小和分到哪个人了
    let gCount=0,sCount = 0
    while(gCount<gLen&&sCount<sLen){
        if(g[gCount]<=s[sCount]){
            gCount++
            sCount++
        }else{
            gCount++
        }
    }
    return sCount
};

console.log(findContentChildren([1,2], [1,2,3]))